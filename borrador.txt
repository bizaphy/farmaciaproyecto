/ // 📌 Ruta para agregar un nuevo producto a la base de datos
// app.post("/api/products", async (req, res) => {
//   const { nombre, descripcion, precio, imagen_url, user_id } = req.body;

//   if (!nombre || !descripcion || !precio || !imagen_url) {
//     return res.status(400).json({ error: "Todos los campos son obligatorios" });
//   }

//   try {
//     const result = await pool.query(
//       `INSERT INTO productos (nombre, descripcion, precio, imagen_url, user_id)
//       VALUES ($1, $2, $3, $4, $5) RETURNING *`,
//       [nombre, descripcion, precio, imagen_url, user_id]
//     );

//     console.log("📌 Producto agregado:", result.rows[0]);
//     res.status(201).json(result.rows[0]);
//   } catch (error) {
//     console.error("❌ Error al insertar producto:", error);
//     res.status(500).json({ error: "Error al insertar el producto" });
//   }
// });






import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../context/AuthContext";

function CrearProducto() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    title: "",
    description: "",
    price: "",
    image_url: "",
  });
  const [error, setError] = useState("");

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await fetch(
        "https://farmaciaproyecto.onrender.com/api/products",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            nombre: formData.title, // Asegurar que coincida con los campos de la DB
            descripcion: formData.description,
            precio: parseFloat(formData.price),
            image_url: formData.image_url,
            user_id: user?.id || null, // Si necesitas almacenar el usuario
          }),
        }
      );

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Error al crear el producto");
      }

      navigate("/gallery"); // Redirigir después de éxito
    } catch (error) {
      setError(error.message);
    }
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="max-w-2xl mx-auto bg-white rounded-lg shadow-md p-6">
        <h2 className="text-2xl font-bold mb-6">Crear Nueva Publicación</h2>

        {error && <p className="text-red-500 mb-4">{error}</p>}

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">
              Título
            </label>
            <input
              type="text"
              required
              value={formData.title}
              onChange={(e) =>
                setFormData({ ...formData, title: e.target.value })
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Descripción
            </label>
            <textarea
              required
              value={formData.description}
              onChange={(e) =>
                setFormData({ ...formData, description: e.target.value })
              }
              rows="4"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              Precio
            </label>
            <input
              type="number"
              required
              value={formData.price}
              onChange={(e) =>
                setFormData({ ...formData, price: e.target.value })
              }
              step="0.01"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700">
              URL de la imagen
            </label>
            <input
              type="url"
              required
              value={formData.image_url}
              onChange={(e) =>
                setFormData({ ...formData, image_url: e.target.value })
              }
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-green-500 focus:ring-green-500"
            />
          </div>

          <button
            type="submit"
            className="w-full bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
          >
            Publicar
          </button>
        </form>
      </div>
    </div>
  );
}

export default CrearProducto;



import { useState, useEffect } from "react";
import { useAuth } from "../context/AuthContext";
import {
  Container,
  Paper,
  Typography,
  Button,
  TextField,
  Box,
  InputAdornment,
} from "@mui/material";
import { Person, Phone, Home } from "@mui/icons-material";

// 📌 Componente para mostrar y editar el perfil del usuario
const Profile = () => {
  const { user } = useAuth(); // 📌 Obtiene el usuario autenticado desde el contexto de autenticación

  // 📌 Estados para almacenar la información del perfil y controlar la edición
  const [profile, setProfile] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    address: "",
  });

  // 📌 Efecto para obtener el perfil del usuario cuando el componente se monta
  useEffect(() => {
    if (user) {
      fetchProfile();
    }
  }, [user]);

  // 📌 Función para obtener los datos del perfil desde la base de datos
  const fetchProfile = async () => {
    const { data } = await supabase
      .from("profiles")
      .select("*")
      .eq("id", user.id)
      .single();

    if (data) {
      setProfile(data);
      setFormData({
        name: data.name || "",
        phone: data.phone || "",
        address: data.address || "",
      });
    }
  };

  // 📌 Función para actualizar el perfil en la BDD
  const handleSubmit = async (e) => {
    e.preventDefault();
    const { error } = await supabase.from("profiles").upsert({
      id: user.id,
      ...formData,
      updated_at: new Date(),
    });

    if (!error) {
      setIsEditing(false);
      fetchProfile(); // 📌 Recarga los datos actualizados
    }
  };

  return (
    <Container maxWidth="sm" sx={{ mt: 4 }}>
      <Paper elevation={3} sx={{ p: 4, borderRadius: "12px" }}>
        <Typography variant="h4" textAlign="center" gutterBottom>
          Mi Perfil
        </Typography>

        {/* 📌 Información del perfil si no se está editando */}
        {!isEditing ? (
          <Box sx={{ display: "flex", flexDirection: "column", gap: 2 }}>
            <Typography>
              <strong>Nombre:</strong> {profile?.name}
            </Typography>
            <Typography>
              <strong>Email:</strong> {user?.email}
            </Typography>
            <Typography>
              <strong>Teléfono:</strong> {profile?.phone}
            </Typography>
            <Typography>
              <strong>Dirección:</strong> {profile?.address}
            </Typography>

            {/* 📌 Botón EDITAR PERFIL*/}
            <Button
              variant="contained"
              onClick={() => setIsEditing(true)}
              sx={{
                mt: 2,
                backgroundColor: "#FF0000",
                "&:hover": { backgroundColor: "#CC0000" },
              }}
            >
              Editar Perfil
            </Button>
          </Box>
        ) : (
          // 📌 Formulario para la edicion del perfil
          <Box
            component="form"
            onSubmit={handleSubmit}
            sx={{ display: "flex", flexDirection: "column", gap: 2 }}
          >
            <TextField
              label="Nombre"
              variant="outlined"
              fullWidth
              value={formData.name}
              onChange={(e) =>
                setFormData({ ...formData, name: e.target.value })
              }
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Person color="action" />
                  </InputAdornment>
                ),
              }}
            />
            <TextField
              label="Teléfono"
              variant="outlined"
              fullWidth
              value={formData.phone}
              onChange={(e) =>
                setFormData({ ...formData, phone: e.target.value })
              }
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Phone color="action" />
                  </InputAdornment>
                ),
              }}
            />
            <TextField
              label="Dirección"
              variant="outlined"
              fullWidth
              value={formData.address}
              onChange={(e) =>
                setFormData({ ...formData, address: e.target.value })
              }
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <Home color="action" />
                  </InputAdornment>
                ),
              }}
            />

            {/* 📌 Botones para guardar o cancelar la edición */}
            <Box sx={{ display: "flex", justifyContent: "space-between" }}>
              <Button
                type="submit"
                variant="contained"
                sx={{
                  backgroundColor: "#FF0000",
                  "&:hover": { backgroundColor: "#CC0000" },
                }}
              >
                Guardar
              </Button>
              <Button
                variant="contained"
                onClick={() => setIsEditing(false)}
                sx={{
                  backgroundColor: "#808080",
                  "&:hover": { backgroundColor: "#606060" },
                }}
              >
                Cancelar
              </Button>
            </Box>
          </Box>
        )}
      </Paper>
    </Container>
  );
};

export default Profile;



import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import {
  Container,
  Box,
  Typography,
  TextField,
  Button,
  Alert,
} from "@mui/material";

function RecuperarContrasena() {
  const [email, setEmail] = useState("");
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    // Validación básica del correo electrónico
    if (!email || !email.includes("@")) {
      setError("Por favor, ingresa un correo electrónico válido.");
      return;
    }

    try {
      // Aquí iría la lógica para enviar la solicitud de recuperación de contraseña
      // Por ejemplo, una llamada a una API
      console.log("Solicitud de recuperación enviada para:", email);

      // Simular éxito
      setSuccess("Se ha enviado un correo para restablecer tu contraseña.");
      setError("");
      setEmail("");

      // Redirigir al usuario después de unos segundos
      setTimeout(() => {
        navigate("/login");
      }, 3000);
    } catch (error) {
      setError("Ocurrió un error al enviar la solicitud. Inténtalo de nuevo.");
      console.error(error);
    }
  };

  return (
    <Container maxWidth="sm">
      <Box
        sx={{
          display: "flex",
          flexDirection: "column",
          alignItems: "center",
          mt: 8,
          p: 4,
          borderRadius: 2,
          boxShadow: 3,
          bgcolor: "white",
        }}
      >
        <Typography variant="h4" fontWeight="bold" color="black" gutterBottom>
          Recuperar Contrasena
        </Typography>

        {error && (
          <Alert severity="error" sx={{ width: "100%", mb: 2 }}>
            {error}
          </Alert>
        )}

        {success && (
          <Alert severity="success" sx={{ width: "100%", mb: 2 }}>
            {success}
          </Alert>
        )}

        <Typography variant="body1" sx={{ mb: 2, textAlign: "center" }}>
          Ingresa tu correo electrónico y te enviaremos un enlace para
          restablecer tu contrasena.
        </Typography>

        <Box component="form" onSubmit={handleSubmit} sx={{ width: "100%" }}>
          <TextField
            fullWidth
            label="Correo electrónico"
            type="email"
            variant="outlined"
            margin="normal"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
          <Button
            type="submit"
            fullWidth
            variant="contained"
            sx={{
              mt: 2,
              py: 1.5,
              bgcolor: "#FF0000",
              "&:hover": { bgcolor: "#B20000" },
            }}
          >
            Enviar
          </Button>
        </Box>

        {/* Enlace para volver al inicio de sesión */}
        <Typography
          variant="body2"
          sx={{ mt: 2, textAlign: "center", cursor: "pointer" }}
          onClick={() => navigate("/login")}
        >
          Volver al inicio de sesión
        </Typography>
      </Box>
    </Container>
  );
}

export default RecuperarContrasena;
